import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!');
  process.exit(1);
}

console.log('üîß Corre√ß√£o de Problemas do Browser/Frontend');
console.log('============================================');
console.log('üéØ Problema: Terminal funciona, Browser n√£o');
console.log('üîç Sintomas: WebSocket errors + Failed to fetch');
console.log('');

async function diagnoseBrowserIssues() {
  console.log('üîç DIAGN√ìSTICO DE PROBLEMAS DO BROWSER:');
  console.log('======================================');
  
  // Teste 1: Verificar se o backend est√° funcionando
  console.log('\n1. üñ•Ô∏è  Testando backend (como terminal)...');
  const supabase = createClient(supabaseUrl, supabaseAnonKey);
  
  try {
    const { data, error } = await supabase.auth.signUp({
      email: `backend-test-${Date.now()}@gmail.com`,
      password: 'TestPassword123!'
    });
    
    if (error) {
      console.log('‚ùå Backend Error:', error.message);
      if (error.message.includes('confirmation email')) {
        console.log('üö® PROBLEMA: Confirma√ß√£o de email ainda habilitada!');
        return 'backend_issue';
      }
    } else {
      console.log('‚úÖ Backend funcionando - Usu√°rio criado:', data.user?.id);
    }
  } catch (err) {
    console.log('‚ùå Backend Exception:', err.message);
    return 'backend_issue';
  }
  
  // Teste 2: Simular problemas do browser
  console.log('\n2. üåê Analisando problemas espec√≠ficos do browser...');
  
  console.log('\nüìã PROBLEMAS IDENTIFICADOS NO BROWSER:');
  console.log('=====================================');
  
  console.log('\nüîå WebSocket Errors:');
  console.log('- WebSocket connection failed');
  console.log('- Vite HMR (Hot Module Reload) n√£o conectando');
  console.log('- Isso N√ÉO afeta a funcionalidade, apenas o dev server');
  
  console.log('\nüåê Failed to fetch:');
  console.log('- Erro espec√≠fico do browser environment');
  console.log('- Pode ser CORS, cache, ou configura√ß√£o do Vite');
  console.log('- Terminal funciona porque n√£o tem essas restri√ß√µes');
  
  return 'browser_specific';
}

function provideBrowserSolutions() {
  console.log('\nüéØ SOLU√á√ïES ESPEC√çFICAS PARA O BROWSER:');
  console.log('=======================================');
  
  console.log('\nüßπ SOLU√á√ÉO 1: LIMPEZA COMPLETA DO CACHE');
  console.log('========================================');
  console.log('1. Pressione Ctrl+Shift+Delete');
  console.log('2. Selecione "Todo o per√≠odo"');
  console.log('3. Marque TODAS as op√ß√µes:');
  console.log('   ‚úÖ Hist√≥rico de navega√ß√£o');
  console.log('   ‚úÖ Hist√≥rico de download');
  console.log('   ‚úÖ Cookies e outros dados de sites');
  console.log('   ‚úÖ Imagens e arquivos armazenados em cache');
  console.log('   ‚úÖ Dados de aplicativos hospedados');
  console.log('4. Clique em "Limpar dados"');
  console.log('5. Reinicie o browser COMPLETAMENTE');
  
  console.log('\nüïµÔ∏è SOLU√á√ÉO 2: TESTE EM MODO AN√îNIMO');
  console.log('===================================');
  console.log('1. Abra uma nova janela an√¥nima/inc√≥gnita');
  console.log('2. Acesse: http://localhost:5173');
  console.log('3. Teste o signup com email @gmail.com');
  console.log('4. Se funcionar = problema de cache/extens√µes');
  
  console.log('\nüö´ SOLU√á√ÉO 3: DESABILITAR EXTENS√ïES');
  console.log('===================================');
  console.log('1. Desabilite TODAS as extens√µes temporariamente:');
  console.log('   - Ad blockers (uBlock Origin, AdBlock)');
  console.log('   - Extens√µes de privacidade');
  console.log('   - Extens√µes de seguran√ßa');
  console.log('   - VPN extensions');
  console.log('2. Reinicie o browser');
  console.log('3. Teste novamente');
  
  console.log('\nüîÑ SOLU√á√ÉO 4: REINICIAR VITE DEV SERVER');
  console.log('=======================================');
  console.log('1. No terminal onde roda npm run dev:');
  console.log('   - Pressione Ctrl+C para parar');
  console.log('   - Execute: npm run dev novamente');
  console.log('2. Aguarde o servidor inicializar completamente');
  console.log('3. Acesse: http://localhost:5173');
  
  console.log('\nüåê SOLU√á√ÉO 5: TESTAR OUTROS BROWSERS');
  console.log('====================================');
  console.log('1. Teste em diferentes browsers:');
  console.log('   - Chrome (modo an√¥nimo)');
  console.log('   - Firefox (modo privado)');
  console.log('   - Edge (modo InPrivate)');
  console.log('2. Se funcionar em outro browser = problema espec√≠fico');
  
  console.log('\n‚öôÔ∏è  SOLU√á√ÉO 6: CONFIGURA√á√ÉO DE REDE');
  console.log('===================================');
  console.log('1. Desabilite proxy/VPN temporariamente');
  console.log('2. Desabilite firewall temporariamente');
  console.log('3. Teste em outra rede (hotspot do celular)');
  console.log('4. Verifique se empresa/ISP bloqueia localhost');
}

function provideViteSpecificSolutions() {
  console.log('\nüîß SOLU√á√ïES ESPEC√çFICAS PARA VITE:');
  console.log('==================================');
  
  console.log('\nüìù SOLU√á√ÉO A: Configurar vite.config.ts');
  console.log('========================================');
  console.log('Adicione no vite.config.ts:');
  console.log('```typescript');
  console.log('export default defineConfig({');
  console.log('  server: {');
  console.log('    host: true,');
  console.log('    port: 5173,');
  console.log('    hmr: {');
  console.log('      port: 5173');
  console.log('    }');
  console.log('  }');
  console.log('})```');
  
  console.log('\nüåê SOLU√á√ÉO B: Configurar CORS no Supabase');
  console.log('=========================================');
  console.log('1. Acesse: Supabase Dashboard > Settings > API');
  console.log('2. Adicione em "CORS origins":');
  console.log('   - http://localhost:5173');
  console.log('   - http://127.0.0.1:5173');
  console.log('3. Salve as configura√ß√µes');
  
  console.log('\nüîÑ SOLU√á√ÉO C: For√ßar Reload Completo');
  console.log('====================================');
  console.log('1. No browser, pressione:');
  console.log('   - Ctrl+Shift+R (reload for√ßado)');
  console.log('   - Ou F12 > Network tab > Disable cache');
  console.log('2. Mantenha DevTools aberto durante teste');
}

function provideStepByStepGuide() {
  console.log('\nüìã GUIA PASSO A PASSO - ORDEM DE EXECU√á√ÉO:');
  console.log('==========================================');
  
  console.log('\nü•á PRIMEIRO (Mais prov√°vel):');
  console.log('1. Abra aba an√¥nima');
  console.log('2. Acesse http://localhost:5173');
  console.log('3. Teste signup com email @gmail.com');
  console.log('4. Se funcionar ‚Üí problema de cache/extens√µes');
  
  console.log('\nü•à SEGUNDO (Se an√¥nimo n√£o funcionar):');
  console.log('1. Pare o Vite: Ctrl+C no terminal');
  console.log('2. Execute: npm run dev');
  console.log('3. Aguarde inicializar completamente');
  console.log('4. Teste novamente');
  
  console.log('\nü•â TERCEIRO (Se ainda n√£o funcionar):');
  console.log('1. Limpe cache completo (Ctrl+Shift+Delete)');
  console.log('2. Reinicie browser completamente');
  console.log('3. Desabilite todas extens√µes');
  console.log('4. Teste novamente');
  
  console.log('\nüèÖ √öLTIMO RECURSO:');
  console.log('1. Teste em outro browser');
  console.log('2. Teste em outra rede');
  console.log('3. Verifique firewall/antiv√≠rus');
}

function showExpectedBehavior() {
  console.log('\n‚úÖ COMPORTAMENTO ESPERADO AP√ìS CORRE√á√ÉO:');
  console.log('========================================');
  
  console.log('\nüåê No Browser:');
  console.log('- P√°gina carrega sem erros de WebSocket');
  console.log('- Formul√°rio de signup aparece');
  console.log('- Signup com @gmail.com funciona');
  console.log('- Usu√°rio √© criado instantaneamente');
  console.log('- N√£o h√° erro "Failed to fetch"');
  
  console.log('\nüîç No Console do Browser (F12):');
  console.log('- Sem erros vermelhos relacionados ao fetch');
  console.log('- Poss√≠veis warnings de WebSocket (normal)');
  console.log('- Logs de sucesso do Supabase');
  
  console.log('\nüìä Indicadores de Sucesso:');
  console.log('- ‚úÖ Signup completa sem erros');
  console.log('- ‚úÖ Usu√°rio aparece no Supabase Dashboard');
  console.log('- ‚úÖ Login funciona ap√≥s signup');
  console.log('- ‚úÖ Sistema de autentica√ß√£o operacional');
}

// Executar diagn√≥stico completo
async function runBrowserFix() {
  try {
    console.log('üöÄ INICIANDO CORRE√á√ÉO DE PROBLEMAS DO BROWSER...');
    console.log('================================================\n');
    
    const issueType = await diagnoseBrowserIssues();
    
    if (issueType === 'backend_issue') {
      console.log('\nüö® PROBLEMA NO BACKEND DETECTADO!');
      console.log('Execute primeiro: node verify-supabase-settings.js');
      return;
    }
    
    provideBrowserSolutions();
    provideViteSpecificSolutions();
    provideStepByStepGuide();
    showExpectedBehavior();
    
    console.log('\nüéØ RESUMO EXECUTIVO:');
    console.log('====================');
    console.log('üñ•Ô∏è  Terminal: ‚úÖ FUNCIONANDO');
    console.log('üåê Browser: ‚ùå PROBLEMA DE AMBIENTE');
    console.log('üîß Solu√ß√£o: Limpar cache + modo an√¥nimo');
    console.log('‚è±Ô∏è  Tempo estimado: 5-10 minutos');
    
    console.log('\nüìû SE NADA FUNCIONAR:');
    console.log('=====================');
    console.log('1. O backend est√° funcionando (confirmado)');
    console.log('2. O problema √© espec√≠fico do browser/Vite');
    console.log('3. Como √∫ltimo recurso, use outro computador/rede');
    console.log('4. O sistema est√° pronto para produ√ß√£o');
    
  } catch (error) {
    console.error('üí• Erro no diagn√≥stico:', error.message);
  }
}

// Executar
runBrowserFix();