const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkTableStatus() {
  console.log('üîç Verificando status da tabela password_reset_tokens...');
  
  try {
    // 1. Verificar se a tabela existe
    const { data: tables, error: tableError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .eq('table_name', 'password_reset_tokens');
    
    if (tableError) {
      console.error('‚ùå Erro ao verificar tabela:', tableError);
      return;
    }
    
    if (!tables || tables.length === 0) {
      console.log('‚ùå Tabela password_reset_tokens n√£o existe');
      return;
    }
    
    console.log('‚úÖ Tabela password_reset_tokens existe');
    
    // 2. Verificar estrutura da tabela
    const { data: columns, error: columnError } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type, is_nullable, column_default')
      .eq('table_schema', 'public')
      .eq('table_name', 'password_reset_tokens')
      .order('ordinal_position');
    
    if (columnError) {
      console.error('‚ùå Erro ao verificar colunas:', columnError);
      return;
    }
    
    console.log('\nüìã Estrutura da tabela:');
    columns.forEach(col => {
      console.log(`  - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);
    });
    
    // 3. Verificar √≠ndices
    const { data: indexes, error: indexError } = await supabase
      .from('pg_indexes')
      .select('indexname, indexdef')
      .eq('schemaname', 'public')
      .eq('tablename', 'password_reset_tokens');
    
    if (indexError) {
      console.error('‚ùå Erro ao verificar √≠ndices:', indexError);
    } else {
      console.log('\nüîó √çndices encontrados:');
      indexes.forEach(idx => {
        console.log(`  - ${idx.indexname}`);
      });
    }
    
    // 4. Verificar pol√≠ticas RLS
    const { data: policies, error: policyError } = await supabase
      .from('pg_policies')
      .select('policyname, permissive, roles, cmd, qual')
      .eq('schemaname', 'public')
      .eq('tablename', 'password_reset_tokens');
    
    if (policyError) {
      console.error('‚ùå Erro ao verificar pol√≠ticas:', policyError);
    } else {
      console.log('\nüîí Pol√≠ticas RLS encontradas:');
      policies.forEach(policy => {
        console.log(`  - ${policy.policyname} (${policy.cmd})`);
      });
    }
    
    // 5. Verificar triggers
    const { data: triggers, error: triggerError } = await supabase
      .from('information_schema.triggers')
      .select('trigger_name, event_manipulation, action_timing')
      .eq('event_object_schema', 'public')
      .eq('event_object_table', 'password_reset_tokens');
    
    if (triggerError) {
      console.error('‚ùå Erro ao verificar triggers:', triggerError);
    } else {
      console.log('\n‚ö° Triggers encontrados:');
      triggers.forEach(trigger => {
        console.log(`  - ${trigger.trigger_name} (${trigger.action_timing} ${trigger.event_manipulation})`);
      });
    }
    
    // 6. Contar registros na tabela
    const { count, error: countError } = await supabase
      .from('password_reset_tokens')
      .select('*', { count: 'exact', head: true });
    
    if (countError) {
      console.error('‚ùå Erro ao contar registros:', countError);
    } else {
      console.log(`\nüìä Total de registros: ${count}`);
    }
    
    // 7. Verificar se h√° duplica√ß√µes de pol√≠ticas ou √≠ndices
    console.log('\nüîç Verificando duplica√ß√µes...');
    
    // Verificar duplica√ß√£o de √≠ndices
    const indexNames = indexes.map(idx => idx.indexname);
    const duplicateIndexes = indexNames.filter((name, index) => indexNames.indexOf(name) !== index);
    
    if (duplicateIndexes.length > 0) {
      console.log('‚ö†Ô∏è √çndices duplicados encontrados:', duplicateIndexes);
    } else {
      console.log('‚úÖ Nenhum √≠ndice duplicado encontrado');
    }
    
    // Verificar duplica√ß√£o de pol√≠ticas
    const policyNames = policies.map(policy => policy.policyname);
    const duplicatePolicies = policyNames.filter((name, index) => policyNames.indexOf(name) !== index);
    
    if (duplicatePolicies.length > 0) {
      console.log('‚ö†Ô∏è Pol√≠ticas duplicadas encontradas:', duplicatePolicies);
    } else {
      console.log('‚úÖ Nenhuma pol√≠tica duplicada encontrada');
    }
    
    console.log('\n‚úÖ Verifica√ß√£o completa!');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

checkTableStatus();