const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.VITE_SUPABASE_ANON_KEY; // Usando anon key por enquanto

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!');
  console.log('Encontradas:');
  console.log('VITE_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
  console.log('VITE_SUPABASE_ANON_KEY:', supabaseServiceKey ? '‚úÖ' : '‚ùå');
  console.log('\nüí° Nota: Usando ANON_KEY para testes b√°sicos');
  if (!supabaseUrl) process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function executeSQLFunction(functionName, params = []) {
  try {
    console.log(`\nüîß Executando fun√ß√£o: ${functionName}`);
    
    const { data, error } = await supabase.rpc(functionName, ...params);
    
    if (error) {
      console.error(`‚ùå Erro ao executar ${functionName}:`, error);
      return null;
    }
    
    return data;
  } catch (err) {
    console.error(`‚ùå Erro na execu√ß√£o de ${functionName}:`, err.message);
    return null;
  }
}

async function createFunctions() {
  console.log('üìù Criando fun√ß√µes SQL no Supabase...');
  
  try {
    // Ler o arquivo SQL
    const fs = require('fs');
    const sqlContent = fs.readFileSync('./create-auth-function.sql', 'utf8');
    
    // Dividir em comandos individuais
    const commands = sqlContent
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));
    
    console.log(`üìã Executando ${commands.length} comandos SQL...`);
    
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i];
      if (command.includes('CREATE OR REPLACE FUNCTION')) {
        console.log(`\n‚ö° Executando comando ${i + 1}/${commands.length}`);
        
        const { error } = await supabase.rpc('exec_sql', { sql: command + ';' });
        
        if (error) {
          console.error(`‚ùå Erro no comando ${i + 1}:`, error);
        } else {
          console.log(`‚úÖ Comando ${i + 1} executado com sucesso`);
        }
      }
    }
    
  } catch (err) {
    console.log('‚ö†Ô∏è  N√£o foi poss√≠vel executar SQL diretamente. Tentando m√©todo alternativo...');
    console.log('üí° Execute manualmente o arquivo create-auth-function.sql no Supabase Dashboard');
  }
}

async function testSystemConfiguration() {
  console.log('\nüîç VERIFICANDO CONFIGURA√á√ÉO DO SISTEMA');
  console.log('=' .repeat(50));
  
  const configData = await executeSQLFunction('check_system_config');
  
  if (configData) {
    configData.forEach(config => {
      console.log(`\nüìä ${config.config_name.toUpperCase()}:`);
      console.log(`Status: ${config.status}`);
      console.log('Detalhes:', JSON.stringify(config.value, null, 2));
    });
  } else {
    console.log('‚ùå N√£o foi poss√≠vel verificar configura√ß√£o do sistema');
  }
}

async function testAuthenticationSystem() {
  console.log('\nüß™ TESTANDO SISTEMA DE AUTENTICA√á√ÉO');
  console.log('=' .repeat(50));
  
  const testData = await executeSQLFunction('test_auth_system');
  
  if (testData) {
    console.log('\nüìã RESULTADOS DO TESTE:');
    
    testData.forEach((step, index) => {
      const statusIcon = step.status === 'sucesso' ? '‚úÖ' : 
                        step.status === 'manual' ? 'üîß' : 
                        step.status === 'falha' ? '‚ùå' : '‚ö†Ô∏è';
      
      console.log(`\n${index + 1}. ${statusIcon} ${step.step_name.toUpperCase()}`);
      console.log(`   Status: ${step.status}`);
      
      if (step.details) {
        const details = typeof step.details === 'string' ? 
          JSON.parse(step.details) : step.details;
        
        Object.entries(details).forEach(([key, value]) => {
          console.log(`   ${key}: ${JSON.stringify(value)}`);
        });
      }
    });
    
    // Verificar se o teste foi bem-sucedido
    const hasErrors = testData.some(step => step.status === 'falha');
    const isComplete = testData.some(step => 
      step.step_name === 'limpeza' && step.status === 'sucesso'
    );
    
    console.log('\n' + '='.repeat(50));
    if (hasErrors) {
      console.log('‚ùå TESTE FALHOU - H√° erros no sistema');
    } else if (isComplete) {
      console.log('‚úÖ TESTE COMPLETO - Sistema funcionando corretamente!');
      console.log('üéâ Fluxo de autentica√ß√£o validado com sucesso!');
    } else {
      console.log('‚ö†Ô∏è  TESTE INCOMPLETO - Verificar logs acima');
    }
    
  } else {
    console.log('‚ùå N√£o foi poss√≠vel executar teste do sistema de autentica√ß√£o');
  }
}

async function testDirectDatabaseAccess() {
  console.log('\nüîå TESTANDO ACESSO DIRETO AO BANCO');
  console.log('=' .repeat(50));
  
  try {
    // Testar consulta simples
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .limit(5);
    
    if (tablesError) {
      console.log('‚ùå Erro ao acessar information_schema:', tablesError.message);
    } else {
      console.log('‚úÖ Acesso ao banco funcionando');
      console.log('üìã Tabelas encontradas:', tables?.map(t => t.table_name) || []);
    }
    
    // Testar acesso √† tabela user_profiles
    const { data: profiles, error: profilesError } = await supabase
      .from('user_profiles')
      .select('subscription_status')
      .limit(1);
    
    if (profilesError) {
      console.log('‚ùå Erro ao acessar user_profiles:', profilesError.message);
    } else {
      console.log('‚úÖ Tabela user_profiles acess√≠vel');
      console.log('üìä Total de perfis:', profiles?.length || 0);
    }
    
  } catch (err) {
    console.error('‚ùå Erro no teste de acesso:', err.message);
  }
}

async function main() {
  console.log('üöÄ INICIANDO TESTES COM FUN√á√ïES SUPABASE');
  console.log('=' .repeat(60));
  
  console.log('\nüìã Configura√ß√£o:');
  console.log(`Supabase URL: ${supabaseUrl}`);
  console.log(`Service Key: ${supabaseServiceKey ? '‚úÖ Configurada' : '‚ùå N√£o encontrada'}`);
  
  // 1. Testar acesso b√°sico
  await testDirectDatabaseAccess();
  
  // 2. Tentar criar fun√ß√µes (pode falhar, mas n√£o √© cr√≠tico)
  await createFunctions();
  
  // 3. Verificar configura√ß√£o do sistema
  await testSystemConfiguration();
  
  // 4. Testar sistema de autentica√ß√£o
  await testAuthenticationSystem();
  
  console.log('\nüèÅ TESTES CONCLU√çDOS');
  console.log('=' .repeat(60));
  
  console.log('\nüí° PR√ìXIMOS PASSOS:');
  console.log('1. Se as fun√ß√µes n√£o foram criadas automaticamente:');
  console.log('   - Acesse o Supabase Dashboard');
  console.log('   - V√° em Database > Functions');
  console.log('   - Execute o conte√∫do de create-auth-function.sql');
  console.log('\n2. Se o teste passou:');
  console.log('   - Sistema de autentica√ß√£o est√° funcionando!');
  console.log('   - Problema √© apenas na configura√ß√£o SMTP');
  console.log('\n3. Se o teste falhou:');
  console.log('   - Verificar estrutura das tabelas');
  console.log('   - Verificar triggers e fun√ß√µes');
}

// Executar testes
main().catch(console.error);