import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

async function testFreshTOTPSetup() {
  console.log('üß™ Testando nova implementa√ß√£o TOTP...');
  
  try {
    // 1. Testar cadastro de usu√°rio
    console.log('\n1. üîê Testando cadastro de usu√°rio...');
    
    const testEmail = `totp-test-${Date.now()}@exemplo.com`;
    const testPassword = 'TestPassword123!';
    
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          full_name: 'Usu√°rio TOTP Teste'
        }
      }
    });
    
    if (signUpError) {
      console.log('‚ùå Erro no cadastro:', signUpError.message);
      return;
    }
    
    console.log('‚úÖ Usu√°rio cadastrado com sucesso!');
    console.log('üìß Email:', testEmail);
    console.log('üÜî ID:', signUpData.user?.id);
    
    // 2. Verificar se perfil foi criado automaticamente
    console.log('\n2. üë§ Verificando cria√ß√£o autom√°tica do perfil...');
    
    if (signUpData.user?.id) {
      const { data: profileData, error: profileError } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('id', signUpData.user.id)
        .single();
      
      if (profileError) {
        console.log('‚ùå Erro ao buscar perfil:', profileError.message);
      } else if (profileData) {
        console.log('‚úÖ Perfil criado automaticamente!');
        console.log('üìÑ Dados do perfil:');
        console.log('  - Email:', profileData.email);
        console.log('  - Nome:', profileData.full_name);
        console.log('  - TOTP habilitado:', profileData.totp_enabled);
        console.log('  - Tipo de assinatura:', profileData.subscription_type);
      } else {
        console.log('‚ùå Perfil n√£o encontrado');
      }
    }
    
    // 3. Testar fun√ß√µes TOTP
    console.log('\n3. üîë Testando fun√ß√µes TOTP...');
    
    // Testar gera√ß√£o de c√≥digos de backup
    const { data: backupCodes, error: backupError } = await supabase
      .rpc('generate_totp_backup_codes');
    
    if (backupError) {
      console.log('‚ùå Erro ao gerar c√≥digos de backup:', backupError.message);
    } else {
      console.log('‚úÖ C√≥digos de backup gerados!');
      console.log('üìã Quantidade de c√≥digos:', backupCodes?.length || 0);
      if (backupCodes && backupCodes.length > 0) {
        console.log('üî¢ Exemplo de c√≥digo:', backupCodes[0]);
      }
    }
    
    // 4. Testar auth hook (verificar token)
    console.log('\n4. üé´ Testando auth hook no token...');
    
    const { data: sessionData } = await supabase.auth.getSession();
    
    if (sessionData.session) {
      console.log('‚úÖ Sess√£o ativa encontrada!');
      
      // Verificar claims personalizados no token
      const token = sessionData.session.access_token;
      const payload = JSON.parse(atob(token.split('.')[1]));
      
      console.log('üîç Claims no token:');
      console.log('  - full_name:', payload.full_name || 'n√£o encontrado');
      console.log('  - subscription_type:', payload.subscription_type || 'n√£o encontrado');
      console.log('  - subscription_status:', payload.subscription_status || 'n√£o encontrado');
      console.log('  - totp_enabled:', payload.totp_enabled || 'n√£o encontrado');
      
      if (payload.full_name || payload.subscription_type || payload.totp_enabled !== undefined) {
        console.log('‚úÖ Auth hook funcionando - claims personalizados encontrados!');
      } else {
        console.log('‚ö†Ô∏è Auth hook pode n√£o estar configurado - claims personalizados n√£o encontrados');
        console.log('üí° Configure o auth hook no Supabase Dashboard: Authentication > Hooks');
      }
    } else {
      console.log('‚ùå Nenhuma sess√£o ativa encontrada');
    }
    
    // 5. Simular configura√ß√£o TOTP
    console.log('\n5. ‚öôÔ∏è Simulando configura√ß√£o TOTP...');
    
    if (signUpData.user?.id) {
      const mockTOTPSecret = 'JBSWY3DPEHPK3PXP'; // Secret de exemplo
      const mockBackupCodes = ['12345678', '87654321', '11111111'];
      
      const { data: updateData, error: updateError } = await supabase
        .from('user_profiles')
        .update({
          totp_secret: mockTOTPSecret,
          totp_enabled: true,
          totp_backup_codes: mockBackupCodes,
          updated_at: new Date().toISOString()
        })
        .eq('id', signUpData.user.id)
        .select();
      
      if (updateError) {
        console.log('‚ùå Erro ao atualizar TOTP:', updateError.message);
      } else {
        console.log('‚úÖ TOTP configurado com sucesso!');
        console.log('üîê Secret configurado:', mockTOTPSecret);
        console.log('üìã C√≥digos de backup:', mockBackupCodes.length, 'c√≥digos');
      }
      
      // Testar valida√ß√£o de c√≥digo de backup
      const { data: validationResult, error: validationError } = await supabase
        .rpc('validate_backup_code', {
          user_id: signUpData.user.id,
          backup_code: '12345678'
        });
      
      if (validationError) {
        console.log('‚ùå Erro ao validar c√≥digo de backup:', validationError.message);
      } else {
        console.log('‚úÖ Valida√ß√£o de c√≥digo de backup:', validationResult ? 'V√ÅLIDO' : 'INV√ÅLIDO');
      }
    }
    
    console.log('\nüéâ TESTE CONCLU√çDO!');
    console.log('\nüìã PR√ìXIMOS PASSOS:');
    console.log('1. Se o auth hook n√£o estiver funcionando, configure-o no Supabase Dashboard');
    console.log('2. Teste o componente TOTPSetup.tsx na aplica√ß√£o');
    console.log('3. Verifique se o fluxo completo de TOTP funciona na interface');
    
  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error.message);
  }
}

testFreshTOTPSetup();