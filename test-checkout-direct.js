import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

// Usar Service Role Key para testes administrativos
const supabaseAdmin = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

async function testCheckoutDirect() {
  console.log('üß™ Testando checkout diretamente...');
  console.log('=' .repeat(60));
  
  try {
    // 1. Buscar um usu√°rio existente para testar
    console.log('\n1Ô∏è‚É£ Buscando usu√°rio para teste...');
    
    const { data: { users }, error: usersError } = await supabaseAdmin.auth.admin.listUsers();
    
    if (usersError) {
      console.log('‚ùå Erro ao listar usu√°rios:', usersError.message);
      return;
    }
    
    const testUser = users?.find(user => user.email === 'igor.bonafe@gmail.com') || users?.[0];
    
    if (!testUser) {
      console.log('‚ùå Nenhum usu√°rio encontrado para teste');
      return;
    }
    
    console.log('‚úÖ Usu√°rio de teste:', testUser.email);
    console.log('üÜî User ID:', testUser.id);
    
    // 2. Verificar configura√ß√µes do Stripe
    console.log('\n2Ô∏è‚É£ Verificando configura√ß√µes do Stripe...');
    
    const stripeConfig = {
      publishableKey: process.env.VITE_STRIPE_PUBLISHABLE_KEY,
      secretKey: process.env.STRIPE_SECRET_KEY,
      monthlyPriceId: process.env.VITE_STRIPE_MONTHLY_PRICE_ID,
      annualPriceId: process.env.VITE_STRIPE_ANNUAL_PRICE_ID,
      webhookSecret: process.env.STRIPE_WEBHOOK_SECRET
    };
    
    console.log('üìä Configura√ß√µes:');
    Object.entries(stripeConfig).forEach(([key, value]) => {
      console.log(`   - ${key}: ${value ? '‚úÖ Configurada' : '‚ùå Ausente'}`);
    });
    
    if (!stripeConfig.monthlyPriceId) {
      console.log('\n‚ùå ERRO CR√çTICO: VITE_STRIPE_MONTHLY_PRICE_ID n√£o configurado!');
      console.log('üí° Adicione no .env: VITE_STRIPE_MONTHLY_PRICE_ID=price_xxx');
      return;
    }
    
    // 3. Testar Edge Function diretamente (sem autentica√ß√£o de usu√°rio)
    console.log('\n3Ô∏è‚É£ Testando Edge Function create-checkout-session...');
    
    const functionsUrl = `${process.env.VITE_SUPABASE_URL}/functions/v1`;
    const testData = {
      priceId: stripeConfig.monthlyPriceId,
      userId: testUser.id,
      userEmail: testUser.email,
      successUrl: `http://localhost:5173/success?session_id={CHECKOUT_SESSION_ID}`,
      cancelUrl: `http://localhost:5173/pricing`
    };
    
    console.log('üîÑ Fazendo requisi√ß√£o para:', `${functionsUrl}/create-checkout-session`);
    console.log('üì¶ Dados enviados:', testData);
    
    // Primeiro, testar sem autentica√ß√£o para ver o erro
    console.log('\nüß™ Teste 1: Sem autentica√ß√£o (deve dar erro 401)...');
    
    const responseNoAuth = await fetch(`${functionsUrl}/create-checkout-session`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData)
    });
    
    console.log('üì° Status sem auth:', responseNoAuth.status, responseNoAuth.statusText);
    
    if (responseNoAuth.status === 401) {
      console.log('‚úÖ Erro 401 esperado - Edge Function est√° ativa mas requer autentica√ß√£o');
    } else {
      const errorText = await responseNoAuth.text();
      console.log('‚ö†Ô∏è Resposta inesperada:', errorText);
    }
    
    // Segundo, testar com Service Role Key
    console.log('\nüß™ Teste 2: Com Service Role Key...');
    
    const responseWithAuth = await fetch(`${functionsUrl}/create-checkout-session`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.SUPABASE_SERVICE_ROLE_KEY}`
      },
      body: JSON.stringify(testData)
    });
    
    console.log('üì° Status com Service Role:', responseWithAuth.status, responseWithAuth.statusText);
    
    if (responseWithAuth.ok) {
      const responseData = await responseWithAuth.json();
      console.log('‚úÖ Resposta da Edge Function:', responseData);
      
      if (responseData.sessionId) {
        console.log('üéâ Sess√£o de checkout criada com sucesso!');
        console.log('üÜî Session ID:', responseData.sessionId);
        console.log('üîó URL de checkout: https://checkout.stripe.com/c/pay/' + responseData.sessionId);
      }
    } else {
      const errorText = await responseWithAuth.text();
      console.log('‚ùå Erro com Service Role:', errorText);
      
      try {
        const errorData = JSON.parse(errorText);
        console.log('üîç Erro estruturado:', errorData);
        
        if (errorData.error?.includes('No such price')) {
          console.log('\nüîç DIAGN√ìSTICO: Price ID inv√°lido');
          console.log('üí° Verifique se o Price ID existe no Stripe Dashboard');
          console.log('üîó Stripe Prices: https://dashboard.stripe.com/test/products');
        }
      } catch (e) {
        console.log('‚ö†Ô∏è Resposta n√£o √© JSON v√°lido');
      }
    }
    
    // 4. Verificar se a Edge Function existe
    console.log('\n4Ô∏è‚É£ Verificando se Edge Functions est√£o deployadas...');
    
    const functions = ['create-checkout-session', 'stripe-webhook'];
    
    for (const funcName of functions) {
      const testResponse = await fetch(`${functionsUrl}/${funcName}`, {
        method: 'GET'
      });
      
      console.log(`üì° ${funcName}: ${testResponse.status}`);
      
      if (testResponse.status === 404) {
        console.log(`‚ùå ${funcName} n√£o est√° deployada`);
      } else if (testResponse.status === 401 || testResponse.status === 405) {
        console.log(`‚úÖ ${funcName} est√° ativa`);
      }
    }
    
    // 5. Verificar perfil do usu√°rio de teste
    console.log('\n5Ô∏è‚É£ Verificando perfil do usu√°rio de teste...');
    
    const { data: profile, error: profileError } = await supabaseAdmin
      .from('user_profiles')
      .select('*')
      .eq('id', testUser.id)
      .single();
    
    if (profileError) {
      console.log('‚ùå Erro ao buscar perfil:', profileError.message);
    } else {
      console.log('‚úÖ Perfil encontrado:');
      console.log(`   - Email: ${profile.email}`);
      console.log(`   - Status: ${profile.subscription_status}`);
      console.log(`   - Customer ID: ${profile.customer_id || 'N√£o definido'}`);
      console.log(`   - Nome: ${profile.full_name || 'N√£o definido'}`);
    }
    
    // 6. Testar conectividade com Stripe
    console.log('\n6Ô∏è‚É£ Testando conectividade com Stripe...');
    
    if (stripeConfig.secretKey) {
      try {
        // Fazer uma requisi√ß√£o simples para a API do Stripe
        const stripeTestResponse = await fetch('https://api.stripe.com/v1/prices/' + stripeConfig.monthlyPriceId, {
          headers: {
            'Authorization': `Bearer ${stripeConfig.secretKey}`
          }
        });
        
        console.log('üì° Status da API Stripe:', stripeTestResponse.status);
        
        if (stripeTestResponse.ok) {
          const priceData = await stripeTestResponse.json();
          console.log('‚úÖ Price encontrado no Stripe:');
          console.log(`   - ID: ${priceData.id}`);
          console.log(`   - Valor: ${priceData.unit_amount / 100} ${priceData.currency.toUpperCase()}`);
          console.log(`   - Tipo: ${priceData.recurring ? 'Recorrente' : '√önico'}`);
        } else {
          const errorText = await stripeTestResponse.text();
          console.log('‚ùå Erro na API Stripe:', errorText);
        }
      } catch (error) {
        console.log('‚ùå Erro ao conectar com Stripe:', error.message);
      }
    }
    
  } catch (error) {
    console.error('üí• Erro inesperado:', error.message);
    console.error('üìÑ Stack trace:', error.stack);
  }
  
  console.log('\n' + '=' .repeat(60));
  console.log('üéØ TESTE DIRETO DE CHECKOUT CONCLU√çDO!');
  console.log('\nüìã DIAGN√ìSTICO:');
  console.log('1. Se Edge Function retornou 401: ‚úÖ Fun√ß√£o ativa, precisa de auth');
  console.log('2. Se Edge Function retornou 404: ‚ùå Fun√ß√£o n√£o deployada');
  console.log('3. Se Stripe retornou erro: ‚ùå Problema com Price ID ou Secret Key');
  console.log('4. Se tudo funcionou: ‚úÖ Problema pode estar no frontend');
  
  console.log('\nüîß PR√ìXIMOS PASSOS:');
  console.log('1. Se Edge Function n√£o existe: Fazer deploy');
  console.log('2. Se Price ID inv√°lido: Verificar no Stripe Dashboard');
  console.log('3. Se tudo OK: Testar login no frontend e tentar checkout');
}

testCheckoutDirect();