/**
 * Script de teste para verificar o fluxo completo de autentica√ß√£o
 * Execute com: node test-auth-flow.js
 */

const { createClient } = require('@supabase/supabase-js')
const fetch = require('node-fetch')
require('dotenv').config()

// Configura√ß√µes
const SUPABASE_URL = process.env.VITE_SUPABASE_URL || process.env.REACT_APP_SUPABASE_URL
const SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY || process.env.REACT_APP_SUPABASE_ANON_KEY
const FRONTEND_URL = process.env.FRONTEND_URL || 'http://localhost:3000'

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('‚ùå Erro: Vari√°veis de ambiente do Supabase n√£o configuradas')
  console.log('Configure VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY no arquivo .env')
  process.exit(1)
}

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

// Dados de teste
const testUser = {
  email: `test-${Date.now()}@example.com`,
  password: 'TestPassword123!',
  fullName: 'Usu√°rio Teste'
}

console.log('üöÄ Iniciando teste do fluxo de autentica√ß√£o...')
console.log(`üìß Email de teste: ${testUser.email}`)
console.log('\n' + '='.repeat(60) + '\n')

async function testAuthFlow() {
  try {
    // 1. Teste de Registro
    console.log('1Ô∏è‚É£ Testando registro de usu√°rio...')
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testUser.email,
      password: testUser.password,
      options: {
        data: {
          full_name: testUser.fullName
        }
      }
    })

    if (signUpError) {
      console.error('‚ùå Erro no registro:', signUpError.message)
      return
    }

    console.log('‚úÖ Usu√°rio registrado com sucesso')
    console.log(`   User ID: ${signUpData.user?.id}`)
    console.log(`   Email confirmado: ${signUpData.user?.email_confirmed_at ? 'Sim' : 'N√£o'}`)
    
    const userId = signUpData.user?.id
    if (!userId) {
      console.error('‚ùå Erro: User ID n√£o encontrado')
      return
    }

    // 2. Verificar estado inicial do usu√°rio
    console.log('\n2Ô∏è‚É£ Verificando estado inicial do usu√°rio...')
    const { data: initialProfile } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('id', userId)
      .single()

    if (initialProfile) {
      console.log('‚úÖ Perfil criado automaticamente')
      console.log(`   Status de assinatura: ${initialProfile.subscription_status}`)
      console.log(`   Email verificado em: ${initialProfile.email_verified_at || 'N√£o verificado'}`)
    } else {
      console.log('‚ö†Ô∏è  Perfil n√£o encontrado - pode ser criado via trigger')
    }

    // 3. Simular confirma√ß√£o de email (em produ√ß√£o seria via link no email)
    console.log('\n3Ô∏è‚É£ Simulando confirma√ß√£o de email...')
    
    // Atualizar manualmente para simular confirma√ß√£o
    const { error: updateError } = await supabase
      .from('user_profiles')
      .update({ 
        email_verified_at: new Date().toISOString(),
        subscription_status: 'pending_subscription'
      })
      .eq('id', userId)

    if (updateError) {
      console.error('‚ùå Erro ao simular confirma√ß√£o:', updateError.message)
    } else {
      console.log('‚úÖ Email confirmado (simulado)')
    }

    // 4. Teste de Login
    console.log('\n4Ô∏è‚É£ Testando login...')
    const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
      email: testUser.email,
      password: testUser.password
    })

    if (signInError) {
      console.error('‚ùå Erro no login:', signInError.message)
      return
    }

    console.log('‚úÖ Login realizado com sucesso')
    console.log(`   Access Token: ${signInData.session?.access_token ? 'Presente' : 'Ausente'}`)

    // 5. Testar endpoint /me
    console.log('\n5Ô∏è‚É£ Testando endpoint /me...')
    try {
      const response = await fetch(`${SUPABASE_URL}/functions/v1/auth-endpoints/me`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${signInData.session?.access_token}`,
          'Content-Type': 'application/json'
        }
      })

      if (response.ok) {
        const userData = await response.json()
        console.log('‚úÖ Endpoint /me funcionando')
        console.log(`   Estado do usu√°rio: ${userData.userState}`)
        console.log(`   Pode acessar dashboard: ${userData.canAccessDashboard ? 'Sim' : 'N√£o'}`)
      } else {
        console.log('‚ö†Ô∏è  Endpoint /me n√£o dispon√≠vel ou com erro')
        console.log(`   Status: ${response.status}`)
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Erro ao testar endpoint /me:', error.message)
    }

    // 6. Verificar estado ap√≥s login
    console.log('\n6Ô∏è‚É£ Verificando estado ap√≥s login...')
    const { data: profileAfterLogin } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('id', userId)
      .single()

    if (profileAfterLogin) {
      console.log('‚úÖ Perfil atualizado:')
      console.log(`   Status: ${profileAfterLogin.subscription_status}`)
      console.log(`   Stripe Customer ID: ${profileAfterLogin.stripe_customer_id || 'N√£o definido'}`)
      console.log(`   √öltima atualiza√ß√£o: ${profileAfterLogin.updated_at}`)
    }

    // 7. Simular assinatura ativa
    console.log('\n7Ô∏è‚É£ Simulando assinatura ativa...')
    const { error: subscriptionError } = await supabase
      .from('user_profiles')
      .update({ 
        subscription_status: 'active',
        stripe_customer_id: 'cus_test_customer_id'
      })
      .eq('id', userId)

    if (subscriptionError) {
      console.error('‚ùå Erro ao simular assinatura:', subscriptionError.message)
    } else {
      console.log('‚úÖ Assinatura ativada (simulado)')
    }

    // 8. Verificar estado final
    console.log('\n8Ô∏è‚É£ Verificando estado final...')
    const { data: finalProfile } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('id', userId)
      .single()

    if (finalProfile) {
      console.log('‚úÖ Estado final do usu√°rio:')
      console.log(`   Status: ${finalProfile.subscription_status}`)
      console.log(`   Pode acessar dashboard: ${finalProfile.subscription_status === 'active' ? 'Sim' : 'N√£o'}`)
    }

    // 9. Limpeza - remover usu√°rio de teste
    console.log('\n9Ô∏è‚É£ Limpando dados de teste...')
    
    // Remover perfil
    await supabase
      .from('user_profiles')
      .delete()
      .eq('id', userId)

    console.log('‚úÖ Dados de teste removidos')

    console.log('\n' + '='.repeat(60))
    console.log('üéâ Teste do fluxo de autentica√ß√£o conclu√≠do com sucesso!')
    console.log('\nüìã Resumo dos estados testados:')
    console.log('   1. pending_email (ap√≥s registro)')
    console.log('   2. pending_subscription (ap√≥s confirma√ß√£o de email)')
    console.log('   3. active (ap√≥s assinatura)')
    console.log('\n‚úÖ Todos os componentes est√£o funcionando corretamente!')

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message)
    console.error('Stack trace:', error.stack)
  }
}

// Fun√ß√£o para testar componentes individuais
async function testComponents() {
  console.log('\nüîß Testando componentes individuais...')
  
  // Testar conex√£o com Supabase
  try {
    const { data, error } = await supabase.from('user_profiles').select('count').limit(1)
    if (error) {
      console.log('‚ùå Erro na conex√£o com Supabase:', error.message)
    } else {
      console.log('‚úÖ Conex√£o com Supabase funcionando')
    }
  } catch (error) {
    console.log('‚ùå Erro ao testar Supabase:', error.message)
  }

  // Testar vari√°veis de ambiente
  console.log('\nüìã Verificando vari√°veis de ambiente:')
  const requiredVars = [
    'VITE_SUPABASE_URL',
    'VITE_SUPABASE_ANON_KEY',
    'RESEND_API_KEY',
    'STRIPE_SECRET_KEY'
  ]

  requiredVars.forEach(varName => {
    const value = process.env[varName]
    console.log(`   ${varName}: ${value ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`)
  })
}

// Executar testes
async function runTests() {
  await testComponents()
  console.log('\n' + '='.repeat(60) + '\n')
  await testAuthFlow()
}

runTests().catch(console.error)