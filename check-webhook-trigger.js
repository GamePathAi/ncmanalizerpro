import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// Carregar vari√°veis de ambiente
dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

console.log('üîç Verificando configura√ß√£o do webhook de email...')

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas!')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function checkWebhookConfiguration() {
  try {
    console.log('\n1Ô∏è‚É£ Verificando se existe trigger para envio de email...')
    
    // Verificar se existe a fun√ß√£o do webhook
    const { data: functions, error: functionsError } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT 
          p.proname as function_name,
          p.prosrc as function_body
        FROM pg_proc p
        JOIN pg_namespace n ON p.pronamespace = n.oid
        WHERE n.nspname = 'public' 
        AND p.proname LIKE '%email%'
        ORDER BY p.proname;
      `
    })
    
    if (functionsError) {
      console.log('‚ö†Ô∏è  Erro ao verificar fun√ß√µes (m√©todo alternativo):', functionsError.message)
      
      // M√©todo alternativo: verificar diretamente
      console.log('\nüîÑ Tentando m√©todo alternativo...')
      const { data: triggerCheck, error: triggerError } = await supabase
        .from('information_schema.triggers')
        .select('*')
        .ilike('trigger_name', '%email%')
      
      if (triggerError) {
        console.log('‚ùå N√£o foi poss√≠vel verificar triggers:', triggerError.message)
      } else {
        console.log('‚úÖ Triggers encontrados:', triggerCheck?.length || 0)
      }
    } else {
      console.log('‚úÖ Fun√ß√µes relacionadas a email encontradas:', functions?.length || 0)
      if (functions && functions.length > 0) {
        functions.forEach(func => {
          console.log(`   - ${func.function_name}`)
        })
      }
    }
    
    console.log('\n2Ô∏è‚É£ Testando Edge Function diretamente...')
    
    // Testar a Edge Function diretamente
    const testPayload = {
      email: 'teste@example.com',
      confirmationUrl: 'http://localhost:5173/confirm?token=test-token'
    }
    
    const { data: functionData, error: functionError } = await supabase.functions.invoke(
      'send-confirmation-email',
      {
        body: testPayload
      }
    )
    
    if (functionError) {
      console.log('‚ùå Erro na Edge Function:', functionError.message)
      console.log('üí° Poss√≠veis causas:')
      console.log('   - RESEND_API_KEY n√£o configurada')
      console.log('   - Edge Function com erro no c√≥digo')
      console.log('   - Problema na API do Resend')
    } else {
      console.log('‚úÖ Edge Function respondeu com sucesso!')
      console.log('üìß Resposta:', functionData)
    }
    
    console.log('\n3Ô∏è‚É£ Verificando configura√ß√µes de autentica√ß√£o...')
    
    // Verificar se a confirma√ß√£o de email est√° habilitada
    const { data: authConfig, error: authError } = await supabase.auth.getSession()
    
    if (authError) {
      console.log('‚ùå Erro ao verificar configura√ß√£o de auth:', authError.message)
    } else {
      console.log('‚úÖ Sistema de autentica√ß√£o ativo')
    }
    
    console.log('\n4Ô∏è‚É£ Diagn√≥stico do problema atual...')
    
    console.log('\nüîç AN√ÅLISE:')
    console.log('‚úÖ Edge Functions deployadas e ativas')
    console.log('‚úÖ Secrets configurados (RESEND_API_KEY presente)')
    console.log('‚ùì Trigger do banco pode estar ausente ou com erro')
    
    console.log('\nüö® PROBLEMA IDENTIFICADO:')
    console.log('O erro "Error sending confirmation email" indica que:')
    console.log('1. O Supabase est√° tentando enviar email de confirma√ß√£o')
    console.log('2. Mas o sistema de envio (trigger + Edge Function) n√£o est√° funcionando')
    console.log('3. Pode ser que o trigger n√£o esteja chamando a Edge Function corretamente')
    
    console.log('\nüîß SOLU√á√ïES POSS√çVEIS:')
    console.log('1. IMEDIATA: Desabilitar confirma√ß√£o de email no Dashboard')
    console.log('   - Ir para Authentication ‚Üí Settings')
    console.log('   - Desmarcar "Enable email confirmations"')
    console.log('\n2. LONGO PRAZO: Reconfigurar o trigger do webhook')
    console.log('   - Executar: node execute-webhook-sql.js')
    console.log('   - Ou executar manualmente o SQL do webhook')
    
  } catch (error) {
    console.error('üí• Erro inesperado:', error)
  }
}

checkWebhookConfiguration()