import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
dotenv.config();

// Usar as vari√°veis corretas do .env
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas:');
  console.log('VITE_SUPABASE_URL:', supabaseUrl ? '‚úÖ Configurada' : '‚ùå N√£o encontrada');
  console.log('VITE_SUPABASE_ANON_KEY:', supabaseKey ? '‚úÖ Configurada' : '‚ùå N√£o encontrada');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testAuthFlow() {
  console.log('üîÑ TESTE DO FLUXO DE AUTENTICA√á√ÉO');
  console.log('=' .repeat(50));
  
  const testEmail = `teste-${Date.now()}@exemplo.com`;
  const testPassword = 'MinhaSenh@123!';
  
  console.log(`üìß Email de teste: ${testEmail}`);
  
  try {
    // PASSO 1: Cadastro
    console.log('\nüîê PASSO 1: Cadastro de usu√°rio');
    console.log('-'.repeat(40));
    
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          full_name: 'Usu√°rio Teste'
        }
      }
    });
    
    if (signUpError) {
      console.error('‚ùå Erro no cadastro:', signUpError.message);
      return;
    }
    
    console.log('‚úÖ Usu√°rio cadastrado com sucesso!');
    console.log('üìß Email confirmado:', signUpData.user?.email_confirmed_at ? 'Sim' : 'N√£o');
    
    // PASSO 2: Verificar perfil do usu√°rio
    console.log('\nüë§ PASSO 2: Verificando perfil do usu√°rio');
    console.log('-'.repeat(40));
    
    if (signUpData.user) {
      const { data: profile, error: profileError } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('id', signUpData.user.id)
        .single();
      
      if (profileError) {
        console.log('‚ö†Ô∏è Perfil n√£o encontrado (ser√° criado automaticamente)');
      } else {
        console.log('‚úÖ Perfil encontrado:');
        console.log('   - Estado:', profile.user_state);
        console.log('   - Email verificado:', profile.email_verified_at ? 'Sim' : 'N√£o');
      }
    }
    
    // PASSO 3: Testar login (se email n√£o precisa confirma√ß√£o)
    console.log('\nüîë PASSO 3: Testando login');
    console.log('-'.repeat(40));
    
    const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    });
    
    if (signInError) {
      console.log('‚ö†Ô∏è Login falhou (esperado se email precisa confirma√ß√£o):', signInError.message);
    } else {
      console.log('‚úÖ Login realizado com sucesso!');
      console.log('   - Usu√°rio ID:', signInData.user?.id);
      console.log('   - Email confirmado:', signInData.user?.email_confirmed_at ? 'Sim' : 'N√£o');
    }
    
    // PASSO 4: Verificar edge functions
    console.log('\n‚ö° PASSO 4: Testando edge functions');
    console.log('-'.repeat(40));
    
    try {
      const { data: funcData, error: funcError } = await supabase.functions.invoke('auth-endpoints', {
        body: { action: 'me' }
      });
      
      if (funcError) {
        console.log('‚ö†Ô∏è Edge function n√£o dispon√≠vel:', funcError.message);
      } else {
        console.log('‚úÖ Edge functions funcionando!');
      }
    } catch (err) {
      console.log('‚ö†Ô∏è Edge functions n√£o testadas:', err.message);
    }
    
    console.log('\nüìã RESUMO DO TESTE:');
    console.log('=' .repeat(50));
    console.log('‚úÖ Conex√£o com Supabase: OK');
    console.log('‚úÖ Cadastro de usu√°rio: OK');
    console.log('‚úÖ Sistema de autentica√ß√£o: Funcionando');
    
  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error.message);
  }
}

testAuthFlow();