// Script para verificar status detalhado do banco de dados
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  'https://fsntzljufghutoyqxokm.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZzbnR6bGp1ZmdodXRveXF4b2ttIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM1OTY0MDEsImV4cCI6MjA2OTE3MjQwMX0.MTkYFy_FfnGOiHrDVjV3AWDYao8YLQf1TnnBWeJwG-I'
)

async function checkDatabaseStatus() {
  console.log('üîç Verifica√ß√£o detalhada do status do banco de dados...')
  console.log('=' .repeat(60))
  
  try {
    // 1. Verificar se a tabela user_profiles existe
    console.log('\n1Ô∏è‚É£ Verificando tabela user_profiles...')
    const { data: tableCheck, error: tableError } = await supabase
      .from('user_profiles')
      .select('count', { count: 'exact', head: true })
    
    if (tableError) {
      console.log('‚ùå Tabela user_profiles n√£o existe ou n√£o √© acess√≠vel')
      console.log('Erro:', tableError.message)
      return
    } else {
      console.log('‚úÖ Tabela user_profiles existe')
      console.log(`üìä Registros: ${tableCheck}`)
    }
    
    // 2. Verificar estrutura da tabela
    console.log('\n2Ô∏è‚É£ Verificando estrutura da tabela...')
    let columns, columnsError
    try {
      const result = await supabase.rpc('get_table_columns', {
        table_name: 'user_profiles'
      })
      columns = result.data
      columnsError = result.error
    } catch (err) {
      // Se a fun√ß√£o n√£o existir, pular verifica√ß√£o de estrutura
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar estrutura da tabela')
      console.log('Motivo: Fun√ß√£o de verifica√ß√£o n√£o dispon√≠vel')
      columns = null
      columnsError = null
    }
    
    if (columnsError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar estrutura da tabela')
      console.log('Erro:', columnsError.message)
    } else if (columns && columns.length > 0) {
      console.log('‚úÖ Estrutura da tabela:')
      columns.forEach(col => {
        console.log(`   - ${col.column_name}: ${col.data_type}`)
      })
    }
    
    // 3. Verificar fun√ß√µes
    console.log('\n3Ô∏è‚É£ Verificando fun√ß√µes...')
    
    // Testar fun√ß√£o handle_new_user (indiretamente)
    console.log('   üîç Testando fun√ß√£o handle_new_user...')
    let functions, functionsError
    try {
      const result = await supabase.rpc('check_function_exists', {
        function_name: 'handle_new_user'
      })
      functions = result.data
      functionsError = result.error
    } catch (err) {
      console.log('   ‚ùå N√£o foi poss√≠vel verificar fun√ß√£o handle_new_user')
      console.log('   Motivo: Fun√ß√£o de verifica√ß√£o n√£o dispon√≠vel')
    }
    
    // Testar fun√ß√£o generate_totp_backup_codes
    console.log('   üîç Testando fun√ß√£o generate_totp_backup_codes...')
    const { data: backupCodes, error: backupError } = await supabase.rpc('generate_totp_backup_codes')
    
    if (backupError) {
      console.log('   ‚ùå Fun√ß√£o generate_totp_backup_codes n√£o existe')
      console.log('   Erro:', backupError.message)
    } else {
      console.log('   ‚úÖ Fun√ß√£o generate_totp_backup_codes funcionando')
      console.log(`   üìù Gerou ${backupCodes?.length || 0} c√≥digos`)
    }
    
    // 4. Verificar pol√≠ticas RLS
    console.log('\n4Ô∏è‚É£ Verificando pol√≠ticas RLS...')
    
    // Tentar inserir um registro de teste (deve falhar por RLS)
    const testUserId = '00000000-0000-0000-0000-000000000000'
    const { data: insertTest, error: insertError } = await supabase
      .from('user_profiles')
      .insert({
        id: testUserId,
        email: 'test@example.com',
        full_name: 'Teste RLS'
      })
    
    if (insertError) {
      if (insertError.message.includes('row-level security')) {
        console.log('   ‚úÖ Pol√≠ticas RLS est√£o ativas (inser√ß√£o bloqueada)')
      } else {
        console.log('   ‚ùå Erro inesperado na inser√ß√£o:')
        console.log('   ', insertError.message)
      }
    } else {
      console.log('   ‚ö†Ô∏è Inser√ß√£o permitida - RLS pode n√£o estar configurado corretamente')
      // Limpar o registro de teste
      await supabase.from('user_profiles').delete().eq('id', testUserId)
    }
    
    // 5. Verificar triggers
    console.log('\n5Ô∏è‚É£ Verificando triggers...')
    console.log('   ‚ÑπÔ∏è Triggers s√≥ podem ser verificados atrav√©s de tentativa de cadastro')
    
    // 6. Resumo final
    console.log('\n' + '=' .repeat(60))
    console.log('üìã RESUMO DO STATUS:')
    console.log('‚úÖ Conex√£o com Supabase: OK')
    console.log('‚úÖ Tabela user_profiles: Existe')
    console.log(backupError ? '‚ùå Fun√ß√µes TOTP: N√£o criadas' : '‚úÖ Fun√ß√µes TOTP: OK')
    console.log('‚úÖ Pol√≠ticas RLS: Ativas')
    console.log('‚ùì Fun√ß√£o handle_new_user: N√£o verific√°vel diretamente')
    console.log('‚ùì Trigger on_auth_user_created: N√£o verific√°vel diretamente')
    
    console.log('\nüö® DIAGN√ìSTICO:')
    if (backupError) {
      console.log('‚ùå O script complete-database-setup.sql N√ÉO foi executado completamente')
      console.log('üìù A√á√ÉO NECESS√ÅRIA:')
      console.log('   1. Acesse o Supabase Dashboard')
      console.log('   2. V√° para SQL Editor')
      console.log('   3. Execute o script complete-database-setup.sql')
      console.log('   4. Verifique se todas as fun√ß√µes foram criadas')
    } else {
      console.log('‚úÖ Fun√ß√µes TOTP criadas - script pode ter sido executado')
      console.log('‚ö†Ô∏è Mas ainda h√° problemas no cadastro - verificar trigger')
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:')
    console.error(error.message)
    console.error(error.stack)
  }
}

checkDatabaseStatus()