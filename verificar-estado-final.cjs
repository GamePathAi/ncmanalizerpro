const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://fsntzljufghutoyqxokm.supabase.co';
const anonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZzbnR6bGp1ZmdodXRveXF4b2ttIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM1OTY0MDEsImV4cCI6MjA2OTE3MjQwMX0.MTkYFy_FfnGOiHrDVjV3AWDYao8YLQf1TnnBWeJwG-I';

const supabase = createClient(supabaseUrl, anonKey);

async function verificarEstadoFinal() {
  console.log('üîç VERIFICA√á√ÉO FINAL DO BANCO DE DADOS');
  console.log('=====================================\n');
  
  try {
    // 1. Verificar se a tabela password_reset_tokens existe
    console.log('1Ô∏è‚É£ Verificando tabela password_reset_tokens...');
    
    const { data: tokenTest, error: tokenError } = await supabase
      .from('password_reset_tokens')
      .select('count')
      .limit(1);
    
    if (tokenError) {
      if (tokenError.message.includes('does not exist') || tokenError.message.includes('schema cache')) {
        console.log('‚ùå Tabela password_reset_tokens N√ÉO EXISTE');
        console.log('   üëâ Execute o SQL manual no Supabase Dashboard');
      } else {
        console.log('‚ö†Ô∏è Erro ao acessar tabela:', tokenError.message);
      }
    } else {
      console.log('‚úÖ Tabela password_reset_tokens EXISTE e est√° acess√≠vel');
    }
    
    // 2. Listar todas as tabelas p√∫blicas
    console.log('\n2Ô∏è‚É£ Listando todas as tabelas p√∫blicas...');
    
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .order('table_name');
    
    if (tablesError) {
      console.log('‚ùå N√£o foi poss√≠vel listar tabelas:', tablesError.message);
    } else if (tables && tables.length > 0) {
      console.log('‚úÖ Tabelas encontradas:');
      tables.forEach(table => {
        console.log(`   - ${table.table_name}`);
      });
    } else {
      console.log('‚ö†Ô∏è Nenhuma tabela p√∫blica encontrada');
    }
    
    // 3. Verificar tabelas de autentica√ß√£o
    console.log('\n3Ô∏è‚É£ Verificando sistema de autentica√ß√£o...');
    
    const { data: authTest, error: authError } = await supabase.auth.getSession();
    
    if (authError) {
      console.log('‚ùå Erro no sistema de auth:', authError.message);
    } else {
      console.log('‚úÖ Sistema de autentica√ß√£o est√° funcionando');
    }
    
    // 4. Verificar se h√° usu√°rios
    console.log('\n4Ô∏è‚É£ Verificando usu√°rios existentes...');
    
    try {
      const { data: users, error: usersError } = await supabase.auth.admin.listUsers();
      
      if (usersError) {
        console.log('‚ö†Ô∏è N√£o foi poss√≠vel listar usu√°rios (normal com chave anon):', usersError.message);
      } else {
        console.log(`‚úÖ Sistema de usu√°rios funcionando. Total: ${users.users?.length || 0}`);
      }
    } catch (userErr) {
      console.log('‚ö†Ô∏è Acesso limitado aos usu√°rios (esperado com chave anon)');
    }
    
    // 5. Testar fun√ß√£o de recupera√ß√£o de senha
    console.log('\n5Ô∏è‚É£ Testando fun√ß√£o de recupera√ß√£o de senha...');
    
    const testEmail = 'teste@exemplo.com';
    const { data: resetData, error: resetError } = await supabase.auth.resetPasswordForEmail(testEmail, {
      redirectTo: 'http://localhost:5173/reset-password'
    });
    
    if (resetError) {
      console.log('‚ùå Erro ao testar recupera√ß√£o:', resetError.message);
    } else {
      console.log('‚úÖ Fun√ß√£o de recupera√ß√£o de senha est√° funcionando');
      console.log('   (Email de teste n√£o ser√° enviado para email inexistente)');
    }
    
    // 6. Resumo final
    console.log('\nüìä RESUMO FINAL');
    console.log('================');
    
    const checks = [
      { name: 'Tabela password_reset_tokens', status: !tokenError },
      { name: 'Listagem de tabelas', status: !tablesError },
      { name: 'Sistema de autentica√ß√£o', status: !authError },
      { name: 'Fun√ß√£o de reset de senha', status: !resetError }
    ];
    
    checks.forEach(check => {
      const icon = check.status ? '‚úÖ' : '‚ùå';
      console.log(`${icon} ${check.name}`);
    });
    
    const allGood = checks.every(check => check.status);
    
    if (allGood) {
      console.log('\nüéâ TUDO FUNCIONANDO PERFEITAMENTE!');
      console.log('   O sistema de recupera√ß√£o de senha est√° pronto para uso.');
    } else {
      console.log('\n‚ö†Ô∏è ALGUNS PROBLEMAS ENCONTRADOS');
      console.log('   Consulte o arquivo GUIA_EXECUCAO_MANUAL_SUPABASE.md');
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral na verifica√ß√£o:', error.message);
    
    console.log('\nüí° POSS√çVEIS SOLU√á√ïES:');
    console.log('1. Verifique se as chaves API est√£o corretas no .env');
    console.log('2. Confirme se est√° no projeto Supabase correto');
    console.log('3. Execute o SQL manual no Supabase Dashboard');
    console.log('4. Verifique se o projeto tem autentica√ß√£o habilitada');
  }
}

verificarEstadoFinal();