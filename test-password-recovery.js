import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

// Testar localmente primeiro
const SUPABASE_FUNCTION_URL = 'http://127.0.0.1:54321';
const LOCAL_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0';

const testEmail = 'gamepathai@gmail.com'; // Email autorizado no Resend

async function testPasswordRecovery() {
  console.log('üîê Testando Sistema de Recupera√ß√£o de Senha');
  console.log('=' .repeat(50));

  try {
    // 1. Testar endpoint de forgot-password
    console.log('\n1. üìß Testando envio de email de recupera√ß√£o...');
    
    const forgotResponse = await fetch(`${SUPABASE_FUNCTION_URL}/functions/v1/password-recovery/forgot-password`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${LOCAL_ANON_KEY}`,
      },
      body: JSON.stringify({ email: testEmail })
    });

    const forgotData = await forgotResponse.json();
    
    if (forgotResponse.ok) {
      console.log('‚úÖ Email de recupera√ß√£o enviado com sucesso!');
      console.log('üìß Resposta:', forgotData);
    } else {
      console.log('‚ùå Erro ao enviar email:', forgotData);
      return;
    }

    // 2. Simular verifica√ß√£o de token (usando um token fict√≠cio)
    console.log('\n2. üîç Testando verifica√ß√£o de token...');
    
    const verifyResponse = await fetch(`${SUPABASE_FUNCTION_URL}/functions/v1/password-recovery/verify-token`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${LOCAL_ANON_KEY}`,
      },
      body: JSON.stringify({ token: 'fake-token-for-testing' })
    });

    const verifyData = await verifyResponse.json();
    
    if (verifyResponse.status === 400 && verifyData.error === 'Token inv√°lido ou expirado') {
      console.log('‚úÖ Valida√ß√£o de token funcionando corretamente (token inv√°lido rejeitado)');
    } else {
      console.log('‚ö†Ô∏è Resposta inesperada na verifica√ß√£o de token:', verifyData);
    }

    // 3. Testar reset-password com token inv√°lido
    console.log('\n3. üîÑ Testando reset de senha com token inv√°lido...');
    
    const resetResponse = await fetch(`${SUPABASE_FUNCTION_URL}/functions/v1/password-recovery/reset-password`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${LOCAL_ANON_KEY}`,
      },
      body: JSON.stringify({ 
        token: 'fake-token-for-testing',
        password: 'newpassword123'
      })
    });

    const resetData = await resetResponse.json();
    
    if (resetResponse.status === 400 && resetData.error === 'Token inv√°lido ou expirado') {
      console.log('‚úÖ Reset de senha funcionando corretamente (token inv√°lido rejeitado)');
    } else {
      console.log('‚ö†Ô∏è Resposta inesperada no reset de senha:', resetData);
    }

    console.log('\nüéâ Teste de recupera√ß√£o de senha conclu√≠do!');
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('1. Verifique o email em gamepathai@gmail.com');
    console.log('2. Clique no link de recupera√ß√£o');
    console.log('3. Teste o reset de senha com token v√°lido');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar teste
testPasswordRecovery();